{"version":3,"file":"demo.js","mappings":"MAUA,SAASA,EAAQC,GACf,GAAIA,GAAO,EAAG,OAAO,EACrB,GAAIA,GAAO,EAAG,OAAO,EAErB,GAAIA,EAAM,GAAM,GAAKA,EAAM,GAAM,EAAG,OAAO,EAE3C,IAAIC,EAAI,EACR,KAAOA,EAAIA,GAAKD,GAAK,CACnB,GAAIA,EAAMC,GAAM,GAAKD,GAAOC,EAAI,IAAO,EAAG,OAAO,EACjDA,GAAK,CACP,CAEA,OAAO,CACT,CAgCAC,QAAQC,KAAK,aACb,MAAMC,EAvDN,SAAmBC,GACjB,IAAID,EAAc,CAAC,EAAG,GACtB,IAAK,IAAIH,EAAI,EAAGA,EAqDY,IArDLA,IACrBG,EAAYE,KAAKF,EAAYH,EAAI,GAAKG,EAAYH,EAAI,IAExD,OAAOG,CACT,CAiDoBG,GACpBL,QAAQM,QAAQ,aAEhBN,QAAQC,KAAK,gBACb,MAAMM,EAAe,GACrB,IAAK,IAAIR,EAAI,EAAGA,EAAIG,EAAYM,OAAQT,IAClCF,EAAQK,EAAYH,KACtBQ,EAAaH,KAAKF,EAAYH,IAGlCC,QAAQM,QAAQ,gBAEhBN,QAAQC,KAAK,aACb,MAAMQ,EA3CN,SAAmBN,GAEjB,IAAIO,EAAS,EACb,IAAK,IAAIX,EAAI,EAAGA,GAAKI,EAAGJ,IACtBW,GAAUX,EAEZ,OAAOW,CACT,CAoCmBC,CAAU,KAC7BX,QAAQM,QAAQ,aAEhBN,QAAQC,KAAK,iBACb,MAAMW,EArCN,SAA+BC,GAC7B,MAAMD,EAAgB,GACtB,IAAK,IAAIb,EAAI,EAAGA,EAmC0B,IAnCfA,IACzBa,EAAcR,KAAKU,KAAKC,UAE1B,OAAOH,CACT,CA+BsBI,GACtBhB,QAAQM,QAAQ,iBAEhBN,QAAQC,KAAK,iBACqBW,EA/BjBK,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAgCpCnB,QAAQM,QAAQ,iBAEhBN,QAAQC,KAAK,iBACb,MAAMmB,EAA+B,gBA9BxBC,MAAM,IAAIC,UAAUC,KAAK,IA+BtCvB,QAAQM,QAAQ,iBAEhBN,QAAQwB,IAAI,uCAAwCjB,GACpDP,QAAQwB,IAAI,oBAAqBf,GACjCT,QAAQwB,IAAI,mBAAoBJ,E","sources":["webpack:///./main.js"],"sourcesContent":["// Function to generate Fibonacci sequence up to n numbers\nfunction fibonacci(n) {\n  let fibSequence = [0, 1];\n  for (let i = 2; i < n; i++) {\n    fibSequence.push(fibSequence[i - 1] + fibSequence[i - 2]);\n  }\n  return fibSequence;\n}\n\n// Function to check if a number is prime\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  if (num <= 3) return true;\n\n  if (num % 2 === 0 || num % 3 === 0) return false;\n\n  let i = 5;\n  while (i * i <= num) {\n    if (num % i === 0 || num % (i + 2) === 0) return false;\n    i += 6;\n  }\n\n  return true;\n}\n\n// Function to calculate factorial of a number\nfunction factorial(n) {\n  if (n === 0 || n === 1) return 1;\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// Function to generate random numbers\nfunction generateRandomNumbers(count) {\n  const randomNumbers = [];\n  for (let i = 0; i < count; i++) {\n    randomNumbers.push(Math.random());\n  }\n  return randomNumbers;\n}\n\n// Function to sort an array of numbers\nfunction sortNumbers(numbers) {\n  return numbers.sort((a, b) => a - b);\n}\n\n// Function to reverse a string\nfunction reverseString(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\n// Benchmarking\nconsole.time(\"fibonacci\");\nconst fibSequence = fibonacci(1000); // Adjust the number as needed\nconsole.timeEnd(\"fibonacci\");\n\nconsole.time(\"primeNumbers\");\nconst primeNumbers = [];\nfor (let i = 0; i < fibSequence.length; i++) {\n  if (isPrime(fibSequence[i])) {\n    primeNumbers.push(fibSequence[i]);\n  }\n}\nconsole.timeEnd(\"primeNumbers\");\n\nconsole.time(\"factorial\");\nconst factResult = factorial(1000); // Adjust the number as needed\nconsole.timeEnd(\"factorial\");\n\nconsole.time(\"randomNumbers\");\nconst randomNumbers = generateRandomNumbers(10000); // Adjust the count as needed\nconsole.timeEnd(\"randomNumbers\");\n\nconsole.time(\"sortedNumbers\");\nconst sortedNumbers = sortNumbers(randomNumbers);\nconsole.timeEnd(\"sortedNumbers\");\n\nconsole.time(\"reverseString\");\nconst reversedString = reverseString(\"Hello, World!\");\nconsole.timeEnd(\"reverseString\");\n\nconsole.log(\"Prime numbers in Fibonacci sequence:\", primeNumbers);\nconsole.log(\"Factorial result:\", factResult);\nconsole.log(\"Reversed string:\", reversedString);\n"],"names":["isPrime","num","i","console","time","fibSequence","n","push","fibonacci","timeEnd","primeNumbers","length","factResult","result","factorial","randomNumbers","count","Math","random","generateRandomNumbers","sort","a","b","reversedString","split","reverse","join","log"],"sourceRoot":""}